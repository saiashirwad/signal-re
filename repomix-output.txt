This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-22T16:12:49.869Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  index.html
  main.js
src/
  App.re
  dune
  hooks.re
  Input.re
  RR.re
.gitignore
.ocamlformat
dune
dune-project
package.json
README.md
signals_re.opam
vite.config.js

================================================================
Files
================================================================

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Minimal React.ml</title>
    <script type="module" src="/main.js"></script>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>

================
File: public/main.js
================
import "../_build/default/src/js/src/App.js";

================
File: src/App.re
================
type todo = {
  id: int,
  title: string,
  completed: bool,
};

type state = {
  todos: list(todo),
  input: string,
};

type action =
  | AddTodo(string)
  | ToggleTodo(int)
  | RemoveTodo(int)
  | ClearCompleted
  | SetInput(string)
  | ClearInput;

let initialState = {
  todos: [],
  input: "",
};

let reducer = (state, action) =>
  switch (action) {
  | SetInput(value) => {
      ...state,
      input: value,
    }
  | AddTodo(title) => {
      todos: [
        {
          id: List.length(state.todos),
          title,
          completed: false,
        },
        ...state.todos,
      ],
      input: "",
    }
  | ToggleTodo(id) => {
      todos:
        List.map(
          todo =>
            todo.id === id
              ? {
                ...todo,
                completed: !todo.completed,
              }
              : todo,
          state.todos,
        ),
      input: state.input,
    }
  | RemoveTodo(id) => {
      todos: List.filter(todo => todo.id !== id, state.todos),
      input: state.input,
    }
  | ClearCompleted => {
      todos: List.filter(todo => !todo.completed, state.todos),
      input: state.input,
    }
  | ClearInput => {
      todos: state.todos,
      input: "",
    }
  };

module App = {
  [@react.component]
  let make = () => {
    let (state, dispatch) = React.useReducer(reducer, initialState);
    let (input, setInput) = React.useState(() => "");

    <div>
      <input
        value={state.input}
        onChange={e => {
          let value = RR.getValueFromEvent(e);
          dispatch(SetInput(value));
        }}
      />
      <Input />
      <input
        value=input
        onChange={e => {
          let value = RR.getValueFromEvent(e);
          setInput(_ => value);
        }}
      />
      <button onClick={_ => dispatch(AddTodo(state.input))}>
        {React.string("Add")}
      </button>
    </div>;
  };
};

switch (ReactDOM.querySelector("#root")) {
| None =>
  Js.Console.error("Failed to start React: couldn't find the #root element")
| Some(element) =>
  let root = ReactDOM.Client.createRoot(element);
  ReactDOM.Client.render(root, <App />);
};

================
File: src/dune
================
(include_subdirs unqualified)

(melange.emit
 (target js)
 (alias react)
 (libraries reason-react)
 (modules :standard)
 ; Uncomment the following to copy the generated JS files inside `src`
 ; (promote (until-clean))
 (preprocess
  (pps melange.ppx reason-react-ppx))
 (module_systems es6))

================
File: src/hooks.re
================
let a = "what";

================
File: src/Input.re
================
let convert = celsius => 9.0 /. 5.0 *. celsius +. 32.0;

[@react.component]
let make = () => {
  let (celsius, setCelsius) = React.useState(() => "");

  <div>
    <input
      value=celsius
      onChange={evt => {
        let newCelsius = React.Event.Form.target(evt)##value;
        setCelsius(_ => newCelsius);
      }}
    />
    {React.string({js|°C = |js})}
    {React.string({js|?°F|js})}
  </div>;
};

================
File: src/RR.re
================
/** Get string value from the given event's target */
let getValueFromEvent = (evt): string => React.Event.Form.target(evt)##value;

/** Alias for [React.string] */
let s = React.string;

/** Render a list of [React.element]s */
let list = list => list |> Stdlib.Array.of_list |> React.array;

/** Render a float as currency */
let currency = value => value |> Js.Float.toFixed(~digits=2) |> React.string;

/** Like [React.useState] but doesn't use callback functions */
let useStateValue = initial =>
  React.useReducer((_state, newState) => newState, initial);

================
File: .gitignore
================
# Based on https://raw.githubusercontent.com/github/gitignore/main/Node.gitignore

_build/

# Logs

logs
_.log
npm-debug.log_
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Caches

.cache

# Diagnostic reports (https://nodejs.org/api/report.html)

report.[0-9]_.[0-9]_.[0-9]_.[0-9]_.json

# Runtime data

pids
_.pid
_.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover

lib-cov

# Coverage directory used by tools like istanbul

coverage
*.lcov

# nyc test coverage

.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)

.grunt

# Bower dependency directory (https://bower.io/)

bower_components

# node-waf configuration

.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)

build/Release

# Dependency directories

node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)

web_modules/

# TypeScript cache

*.tsbuildinfo

# Optional npm cache directory

.npm

# Optional eslint cache

.eslintcache

# Optional stylelint cache

.stylelintcache

# Microbundle cache

.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history

.node_repl_history

# Output of 'npm pack'

*.tgz

# Yarn Integrity file

.yarn-integrity

# dotenv environment variable files

.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)

.parcel-cache

# Next.js build output

.next
out

# Nuxt.js build / generate output

.nuxt
dist

# Gatsby files

# Comment in the public line in if your project uses Gatsby and not Next.js

# https://nextjs.org/blog/next-9-1#public-directory-support

# public

# vuepress build output

.vuepress/dist

# vuepress v2.x temp and cache directory

.temp

# Docusaurus cache and generated files

.docusaurus

# Serverless directories

.serverless/

# FuseBox cache

.fusebox/

# DynamoDB Local files

.dynamodb/

# TernJS port file

.tern-port

# Stores VSCode versions used for testing VSCode extensions

.vscode-test

# yarn v2

.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# IntelliJ based IDEs
.idea

# Finder (MacOS) folder config
.DS_Store

node_modules
dist
_build
.merlin
.melange.eobjs
src/output

================
File: .ocamlformat
================
comment-check = false

profile = janestreet
version = 0.26.2

if-then-else = k-r
let-and = compact
module-item-spacing = preserve

exp-grouping = preserve
sequence-blank-line = preserve

================
File: dune
================
(dirs :standard \ node_modules)

; process all dirs exclcuding dirs starting with an underscore
; ignore `node_modules`
; Reference: https://dune.readthedocs.io/en/stable/reference/predicate-language.html#predicate-language

================
File: dune-project
================
(lang dune 3.17)

(using melange 0.1)

(name signals_re)

(generate_opam_files true)

(source
 (github saiashirwad/signals-re))

(authors "Sai Ashirwad <saiashirwad@gmail.com>")

(maintainers "Sai Ashirwad <saiashirwad@gmail.com>")

(license MIT)

(package
 (allow_empty)
 (name signals_re)
 (synopsis "A signals implementation in ReasonML")
 (description "A signals implementation in ReasonML")
 (depends ocaml dune melange reason-react reason-react-ppx)
 (tags
  ("signals" "react" "reasonml")))

================
File: package.json
================
{
  "name": "signals_re",
  "module": "public/index.html",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@rollup/plugin-node-resolve": "^16.0.0",
    "vite": "^6.0.7"
  }
}

================
File: README.md
================
References: 
https://github.com/lessp/react-ml-minimal-template/

```sh
dune build -w
```
```sh
bun run dev # for live-reloading
```

================
File: signals_re.opam
================
# This file is generated by dune, edit dune-project instead
opam-version: "2.0"
synopsis: "A signals implementation in ReasonML"
description: "A signals implementation in ReasonML"
maintainer: ["Sai Ashirwad <saiashirwad@gmail.com>"]
authors: ["Sai Ashirwad <saiashirwad@gmail.com>"]
license: "MIT"
tags: ["signals" "react" "reasonml"]
homepage: "https://github.com/saiashirwad/signals-re"
bug-reports: "https://github.com/saiashirwad/signals-re/issues"
depends: [
  "ocaml"
  "dune" {>= "3.17"}
  "melange"
  "reason-react"
  "reason-react-ppx"
  "odoc" {with-doc}
]
build: [
  ["dune" "subst"] {dev}
  [
    "dune"
    "build"
    "-p"
    name
    "-j"
    jobs
    "@install"
    "@runtest" {with-test}
    "@doc" {with-doc}
  ]
]
dev-repo: "git+https://github.com/saiashirwad/signals-re.git"

================
File: vite.config.js
================
import { defineConfig } from "vite";
import { nodeResolve } from "@rollup/plugin-node-resolve";

export default defineConfig({
  plugins: [nodeResolve()],
  root: "public",
  build: {
    outDir: "../dist",
    emptyOutDir: true,
  },
});
